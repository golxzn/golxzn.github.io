
const primitives = {
	get_pipeline_attributes(gl, name) {
		switch (name) {
			case "3D": return [
				{ count: 3, type: gl.FLOAT,          normalized: false },
				{ count: 4, type: gl.BYTE,           normalized: true },
				{ count: 2, type: gl.UNSIGNED_SHORT, normalized: true }
			];
			case "3D_COLOR": return [
				{ count: 3, type: gl.FLOAT,          normalized: false },
				{ count: 4, type: gl.UNSIGNED_BYTE,  normalized: true },
				{ count: 2, type: gl.UNSIGNED_SHORT, normalized: true }
			];
			case "3D_UV": return [
				{ count: 3, type: gl.FLOAT,          normalized: false },
				{ count: 4, type: gl.UNSIGNED_BYTE,  normalized: true },
				{ count: 2, type: gl.FLOAT,          normalized: false }
			];

		}
		return [];
	},

	make_plane() {
		const gl = get_service("graphics").gl;
		return new primitive_info(["3D", "LIGHTING"], this.get_pipeline_attributes(gl, "3D"), new Uint8Array([
		//  [         x          ]  [         y          ]  [         z          ]  [ normal 3 + offset  ]  [         UV          ]
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
		]), new Uint16Array([
			0, 1, 2, 3
		]), gl.TRIANGLE_STRIP);
	},

	make_custom_plane(position_scale, uv_scale) {
		const gl = get_service("graphics").gl;

		// Original plane data (vertex positions, normals, UVs)
		let plane_data = new Uint8Array([
		//  [         x          ]  [         y          ]  [         z          ]  [ normal 3 + offset  ]  [                    UV                      ]
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F
		]);

		const stride = 24;
		for (var i = 0; i < 4; ++i) {
			let position = new Float32Array(plane_data.buffer, i * stride, 3);
			for (let j = 0; j < position.length; j++) {
				position[j] *= position_scale;
			}

			let uv = new Float32Array(plane_data.buffer, i * stride + 16, 2);
			for (let j = 0; j < uv.length; j++) {
				uv[j] *= uv_scale;
			}
		}

		return new primitive_info(["3D", "LIGHTING"], this.get_pipeline_attributes(gl, "3D_UV"),
			plane_data, new Uint16Array([0, 1, 2, 3]), gl.TRIANGLE_STRIP
		);
	},



	make_cube() {
		const gl = get_service("graphics").gl;
		return new primitive_info(["3D", "LIGHTING"], this.get_pipeline_attributes(gl, "3D"), new Uint8Array([
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,

			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,

			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,

			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,

			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,

			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		]), new Uint16Array([
			 0,  1,  2,  2,  1,  3, // Front face
			 4,  5,  6,  6,  5,  7, // Back face
			 8,  9, 10, 10,  9, 11, // Top face
			12, 13, 14, 14, 13, 15, // Bottom face
			16, 17, 18, 18, 17, 19, // Left face
			20, 21, 22, 22, 21, 23  // Right face
		]), gl.TRIANGLES);
	},

	make_cube_optimized() {
		const gl = get_service("graphics").gl;
		return new primitive_info(["3D", "LIGHTING"], this.get_pipeline_attributes(gl, "3D"), new Uint8Array([
		//  [         x          ]  [         y          ]  [         z          ]  [ normal 3 + offset  ]  [         UV          ]
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, // 0
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0xFF, 0xFF, 0x00, 0x00, // 1
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0xFF, 0xFF, // 2
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, // 3
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0xFF, 0xFF, 0x00, 0x00, // 4
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, // 5
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, // 6
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0xFF, // 7
		]), new Uint16Array([
			0, 1, 2, 2, 1, 3, // Front face
			4, 5, 6, 6, 5, 7, // Back face
			2, 3, 7, 7, 3, 6, // Top face
			5, 4, 0, 0, 4, 1, // Bottom face
			1, 4, 3, 3, 4, 6, // Left face
			0, 2, 5, 5, 2, 7 // Right face
		]), gl.TRIANGLES);
	},

	make_cube_strip() {
		const gl = get_service("graphics").gl;
		return new primitive_info(["3D", "LIGHTING"], this.get_pipeline_attributes(gl, "3D"), new Uint8Array([
		//  [         x          ]  [         y          ]  [         z          ]  [ normal 3 + offset  ]  [         UV          ]
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x81, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0xFF,
		]), new Uint16Array([
			// Using indices to form a cube with a triangle strip
			0, 1, 2, 3, 6, 1, 4, 5, 6, 7, 2, 5, 0, 1
		]), gl.TRIANGLE_STRIP);
	},

	make_cube_colored(color) {
		const gl = get_service("graphics").gl;
		const to_byte = function(flt) { return parseInt(255 * flt); }

		const r = to_byte(color[0]);
		const g = to_byte(color[1]);
		const b = to_byte(color[2]);
		return new primitive_info(["3D", "PRIMITIVE"], this.get_pipeline_attributes(gl, "3D_COLOR"), new Uint8Array([
		//  [         x          ]  [         y          ]  [         z          ]  [3 + offset ]  [         UV          ]
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, r, g, b, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, r, g, b, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, r, g, b, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, r, g, b, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, r, g, b, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, r, g, b, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, r, g, b, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, r, g, b, 0x00, 0x00, 0x00, 0xFF, 0xFF,
		]), new Uint16Array([
			0, 1, 2, 2, 1, 3, // Front face
			4, 5, 6, 6, 5, 7, // Back face
			2, 3, 7, 7, 3, 6, // Top face
			5, 4, 0, 0, 4, 1, // Bottom face
			1, 4, 3, 3, 4, 6, // Left face
			0, 2, 5, 5, 2, 7 // Right face
		]), gl.TRIANGLES);
	}

}